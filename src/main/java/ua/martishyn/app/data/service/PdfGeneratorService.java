package ua.martishyn.app.data.service;


import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ua.martishyn.app.data.entities.Ticket;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

@WebServlet("/pdf-report")
public class PdfGeneratorService extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LogManager.getLogger(PdfGeneratorService.class);

    @Override
    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response) {

        response.setContentType("application/pdf");
        response.setHeader(
                "Content-disposition",
                "inline; filename='Downloaded.pdf'");
        try {
            Document document = new Document(PageSize.A4);
            Font font =
                    FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD);
            PdfWriter.getInstance(
                    document, response.getOutputStream());
            ArrayList<Ticket> tickets = (ArrayList<Ticket>) request.getSession().getAttribute("tickets");

            document.open();
            addTitlePage(document, font);
            Image image = Image.getInstance("C:/Dev/Epam-2022-course/train-reservation/src/main/webapp/view/images/local_railway.png");
            float scaler = ((document.getPageSize().getWidth() - document.leftMargin()
                    - document.rightMargin() - 0) / image.getWidth()) * 100;
            image.scalePercent(scaler);
            document.add(image);

            //specify column widths
            float[] columnWidths = {2f, 2f, 2f, 2f, 2f};
            //create PDF table with the given widths
            PdfPTable table = new PdfPTable(columnWidths);
            PdfPCell c1 = new PdfPCell(new Phrase("Ticket#", font));
            table.addCell(c1);
            c1 = new PdfPCell(new Phrase("Train#", font));
            table.addCell(c1);
            c1 = new PdfPCell(new Phrase("User id", font));
            table.addCell(c1);
            c1 = new PdfPCell(new Phrase("Price", font));
            table.addCell(c1);
            c1 = new PdfPCell(new Phrase("Status", font));
            table.addCell(c1);
            table.setHeaderRows(1);
            for (Ticket t : tickets) {
                String id = String.valueOf(t.getId());
                String trainId = String.valueOf(t.getTrain().getId());
                String userId = String.valueOf(t.getUserId());
                String price = String.valueOf(t.getPrice());
                String status = t.isPaid() ? "paid" : "not paid";
                table.addCell(id);
                table.addCell(trainId);
                table.addCell(userId);
                table.addCell(price);
                table.addCell(status);
            }
            document.add(table);
            document.close();
            request.getSession().removeAttribute("tickets");
        } catch (Exception exception) {
            log.error("Something wrong happened : {}", exception.getMessage());
        }
    }

    private static void addTitlePage(Document document, Font font)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // Lets write a big header
        preface.add(new Paragraph("Local Railways booking report", font));
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-mm-dd HH:mm")),
                font));
        document.add(preface);
    }
}

